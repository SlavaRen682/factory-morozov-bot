import os
import datetime
from flask import Flask, request
import telebot
from telebot import types
from openpyxl import Workbook, load_workbook

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TOKEN = os.environ.get("TOKEN")
OWNER_ID = int(os.environ.get("OWNER_ID", "0"))
PORT = int(os.environ.get("PORT", 10000))

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
STATE = {}
DATA = {}
PHOTO_LINK = {}
EXCEL_FILE = "orders.xlsx"

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def ensure_excel_file():
    if not os.path.exists(EXCEL_FILE):
        wb = Workbook()
        ws = wb.active
        ws.append(["–î–∞—Ç–∞", "–ò–º—è", "Username", "–§–æ—Ç–æ", "–†–µ–∫–≤–∏–∑–∏—Ç—ã"])
        wb.save(EXCEL_FILE)

def save_to_excel(user, photo_path, requisites):
    ensure_excel_file()
    wb = load_workbook(EXCEL_FILE)
    ws = wb.active
    ws.append([
        datetime.datetime.now().strftime("%Y-%m-%d %H:%M"),
        user.first_name,
        f"@{user.username}" if user.username else "‚Äî",
        photo_path,
        requisites
    ])
    wb.save(EXCEL_FILE)

# === –ö–æ–º–∞–Ω–¥—ã ===
@bot.message_handler(commands=['start'])
def start(message):
    print(f"[LOG] /start –æ—Ç {message.chat.id}")
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–∑–¥–µ–ª–∏—è.")

@bot.message_handler(commands=['contact'])
def contact(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì≤ –°–≤—è–∑–∞—Ç—å—Å—è –≤ Telegram", url="https://t.me/xatyba"))
    bot.send_message(message.chat.id, "–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ —Å–≤—è–∑–∏üëá", reply_markup=markup)

@bot.message_handler(commands=['excel', '–∫–ª–∏–µ–Ω—Ç—ã'])
def send_excel_to_owner(message):
    if message.chat.id == OWNER_ID and os.path.exists(EXCEL_FILE):
        with open(EXCEL_FILE, 'rb') as f:
            bot.send_document(message.chat.id, f, caption="üìä –ó–∞—è–≤–∫–∏ –≤ Excel")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# === –§–æ—Ç–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ===
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user = message.from_user
    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded = bot.download_file(file_info.file_path)

    os.makedirs("photos", exist_ok=True)
    filename = f"photo_{user.id}_{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}.jpg"
    path = os.path.join("photos", filename)
    with open(path, 'wb') as f:
        f.write(downloaded)

    DATA[message.chat.id] = {"photo_path": path, "user": user}
    STATE[message.chat.id] = 'AWAIT_PRICE'

    bot.send_message(message.chat.id, "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ –æ—Ü–µ–Ω–∫—É.")

    caption = (
        f"üÜï –§–æ—Ç–æ –∫–ª–∏–µ–Ω—Ç–∞:\n"
        f"üë§ {user.first_name} (@{user.username or '‚Äî'})\n"
        f"ID: {user.id}\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–æ–π."
    )
    with open(path, 'rb') as img:
        sent = bot.send_photo(OWNER_ID, img, caption=caption)
        PHOTO_LINK[sent.message_id] = message.chat.id

# === –û—Ç–≤–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ (—Ü–µ–Ω–Ω–∏–∫) ===
@bot.message_handler(func=lambda m: m.chat.id == OWNER_ID and m.reply_to_message)
def owner_reply(message):
    reply_id = message.reply_to_message.message_id
    client_id = PHOTO_LINK.get(reply_id)

    if not client_id:
        bot.send_message(OWNER_ID, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç", "–ù–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç")
    bot.send_message(client_id, f"üí∞ –¶–µ–Ω–∞: {message.text}. –£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç?", reply_markup=markup)
    STATE[client_id] = 'AWAIT_CONFIRM'
    del PHOTO_LINK[reply_id]

# === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ===
@bot.message_handler(func=lambda m: STATE.get(m.chat.id) == 'AWAIT_CONFIRM')
def confirm(message):
    if message.text.lower() == "—É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç":
        bot.send_message(message.chat.id, "üìÑ –ü—Ä–∏—à–ª–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.", reply_markup=types.ReplyKeyboardRemove())
        STATE[message.chat.id] = 'AWAIT_REQUISITES'
    else:
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –Ω–∞ —Å–≤—è–∑–∏!", reply_markup=types.ReplyKeyboardRemove())
        STATE.pop(message.chat.id, None)
        DATA.pop(message.chat.id, None)

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ ===
@bot.message_handler(func=lambda m: STATE.get(m.chat.id) == 'AWAIT_REQUISITES')
def handle_requisites(message):
    user = message.from_user
    path = DATA.get(message.chat.id, {}).get("photo_path")
    if not path:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
        return

    save_to_excel(user, path, message.text)
    with open(path, 'rb') as img:
        bot.send_photo(OWNER_ID, img, caption=f"üìÑ –†–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç @{user.username or '‚Äî'}:\n{message.text}")

    bot.send_message(message.chat.id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì≤ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/xatyba"))
    bot.send_message(message.chat.id, "–ï—Å–ª–∏ —á—Ç–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=markup)

    STATE.pop(message.chat.id, None)
    DATA.pop(message.chat.id, None)

# === Webhook ===
@app.route("/", methods=['GET'])
def index():
    return "Bot is running", 200

@app.route("/", methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        update = telebot.types.Update.de_json(request.data.decode("utf-8"))
        bot.process_new_updates([update])
        return "ok", 200
    return "unsupported", 400

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook ===
bot.remove_webhook()
bot.set_webhook(url="https://factory-morozov-bot.onrender.com")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=PORT)
