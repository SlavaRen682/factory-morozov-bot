import telebot
from telebot import types
import os
import flask
import datetime
from openpyxl import Workbook, load_workbook

TOKEN = os.environ.get("TOKEN")
if not TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

owner_id_str = os.environ.get("OWNER_ID")
if not owner_id_str:
    raise ValueError("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OWNER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
OWNER_ID = int(owner_id_str)

bot = telebot.TeleBot(TOKEN, threaded=False)
STATE = {}
DATA = {}
PHOTO_LINK = {}
EXCEL_FILE = 'orders.xlsx'

def ensure_excel_file():
    if not os.path.exists(EXCEL_FILE):
        wb = Workbook()
        ws = wb.active
        ws.append(["–î–∞—Ç–∞", "–ò–º—è", "Username", "–§–æ—Ç–æ", "–†–µ–∫–≤–∏–∑–∏—Ç—ã"])
        wb.save(EXCEL_FILE)

def save_to_excel(user, photo_path, requisites):
    ensure_excel_file()
    wb = load_workbook(EXCEL_FILE)
    ws = wb.active
    ws.append([
        datetime.datetime.now().strftime("%Y-%m-%d %H:%M"),
        user.first_name,
        f"@{user.username}" if user.username else "‚Äî",
        photo_path,
        requisites
    ])
    wb.save(EXCEL_FILE)

@bot.message_handler(commands=['start'])
def start(message):
    name = message.from_user.first_name or "–¥—Ä—É–≥"

    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{name}</b>!\n\n"
        f"–í—ã –ø–æ–ø–∞–ª–∏ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç —Ñ–∞–±—Ä–∏–∫–∏ <b>–ú–æ—Ä–æ–∑–æ–≤—ã—Ö</b> üßµ\n"
        f"–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        f"‚ñ´Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑–¥–µ–ª–∏—è\n"
        f"‚ñ´Ô∏è –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—à–∏–≤–∞\n"
        f"‚ñ´Ô∏è –ü–µ—Ä–µ–¥–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è\n\n"
        f"<i>–ê–∫—Ç—É–∞–ª–µ–Ω –ª–∏ –¥–ª—è –≤–∞—Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ—à–∏–≤ –∏–∑–¥–µ–ª–∏–π?</i>"
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")

    bot.send_message(
        message.chat.id,
        welcome_text,
        reply_markup=markup,
        parse_mode='HTML'
    )

    STATE[message.chat.id] = 'AWAIT_CONFIRM'


@bot.message_handler(commands=['contact'])
def contact_command(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì≤ –ü–µ—Ä–µ–π—Ç–∏ –≤ Telegram", url="https://t.me/xatyba"))
    bot.send_message(message.chat.id, "üí¨ –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ —Å–≤—è–∑–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:", reply_markup=markup)

@bot.message_handler(commands=['excel', '–∫–ª–∏–µ–Ω—Ç—ã'])
def send_excel_to_owner(message):
    if message.chat.id == OWNER_ID and os.path.exists(EXCEL_FILE):
        with open(EXCEL_FILE, 'rb') as f:
            bot.send_document(OWNER_ID, f, caption="üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–π Excel-—Ñ–∞–π–ª —Å –∑–∞—è–≤–∫–∞–º–∏")
    else:
        bot.send_message(message.chat.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

@bot.message_handler(func=lambda m: STATE.get(m.chat.id) == 'AWAIT_CONFIRM')
def confirm_interest(message):
    if message.text.lower() == "–¥–∞":
        bot.send_message(message.chat.id, "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–∑–¥–µ–ª–∏—è, –∏ –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –Ω–∞ –æ—Ü–µ–Ω–∫—É.", reply_markup=types.ReplyKeyboardRemove())
        STATE[message.chat.id] = 'AWAIT_PHOTO'
    else:
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ! –ï—Å–ª–∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å üôÇ", reply_markup=types.ReplyKeyboardRemove())
        STATE.pop(message.chat.id, None)

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    if STATE.get(message.chat.id) != 'AWAIT_PHOTO':
        return

    user = message.from_user
    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded = bot.download_file(file_info.file_path)

    os.makedirs("photos", exist_ok=True)
    photo_name = f"photo_{user.id}_{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}.jpg"
    photo_path = os.path.join("photos", photo_name)
    with open(photo_path, 'wb') as f:
        f.write(downloaded)

    DATA[message.chat.id] = {"photo_path": photo_path, "user": user}
    STATE[message.chat.id] = 'WAITING_OWNER_PRICE'

    bot.send_message(message.chat.id, "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ú—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –µ–≥–æ –Ω–∞ –æ—Ü–µ–Ω–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç —Å –ø—Ä–∏–º–µ—Ä–Ω–æ–π —Ü–µ–Ω–æ–π.")

    caption = (
        f"üÜï –§–æ—Ç–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n"
        f"üë§ {user.first_name} (@{user.username or '‚Äî'})\n"
        f"üÜî ID: {user.id}\n\n"
        f"‚úç –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–π —Ü–µ–Ω–æ–π."
    )
    try:
        with open(photo_path, 'rb') as photo:
            sent = bot.send_photo(OWNER_ID, photo, caption=caption)
            PHOTO_LINK[sent.message_id] = message.chat.id
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")

@bot.message_handler(func=lambda m: m.chat.id == OWNER_ID and m.reply_to_message)
def handle_owner_reply(message):
    reply_id = message.reply_to_message.message_id
    client_id = PHOTO_LINK.get(reply_id)

    if not client_id:
        bot.send_message(OWNER_ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç", "–ù–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç")

    bot.send_message(
        client_id,
        f"üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—à–∏–≤–∞: {message.text}\n–¶–µ–Ω–∞ –≤–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç?",
        reply_markup=markup
    )
    STATE[client_id] = 'AWAIT_PRICE_CONFIRM'
    del PHOTO_LINK[reply_id]

@bot.message_handler(func=lambda m: STATE.get(m.chat.id) == 'AWAIT_PRICE_CONFIRM')
def price_confirm(message):
    if message.text.lower() == "—É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç":
        bot.send_message(message.chat.id, "üìÑ –ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞.", reply_markup=types.ReplyKeyboardRemove())
        STATE[message.chat.id] = 'AWAIT_REQUISITES'
    else:
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å! –ï—Å–ª–∏ —á—Ç–æ ‚Äî –±—É–¥–µ–º –Ω–∞ —Å–≤—è–∑–∏.", reply_markup=types.ReplyKeyboardRemove())
        STATE.pop(message.chat.id, None)
        DATA.pop(message.chat.id, None)

@bot.message_handler(func=lambda m: STATE.get(m.chat.id) == 'AWAIT_REQUISITES')
def handle_requisites(message):
    user = message.from_user
    text = message.text
    photo_path = DATA.get(message.chat.id, {}).get("photo_path")

    if not photo_path:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: /start")
        return

    save_to_excel(user, photo_path, text)

    caption = (
        f"üì¨ –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏—Å–ª–∞–ª —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
        f"üë§ {user.first_name} (@{user.username or '‚Äî'})\n"
        f"üÜî {user.id}\n\n"
        f"üìÑ –†–µ–∫–≤–∏–∑–∏—Ç—ã:\n{text}"
    )

    try:
        with open(photo_path, 'rb') as photo:
            bot.send_photo(OWNER_ID, photo, caption=caption)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")

    bot.send_message(message.chat.id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ Telegram.")

    inline = types.InlineKeyboardMarkup()
    inline.add(types.InlineKeyboardButton("üì≤ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/xatyba"))
    bot.send_message(message.chat.id, "üí¨ –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=inline)

    STATE.pop(message.chat.id, None)
    DATA.pop(message.chat.id, None)

# === Flask + Webhook ===
app = flask.Flask(__name__)

@app.route("/", methods=["GET"])
def index():
    return "Factory Morozov bot is running!", 200

@app.route("/", methods=["POST"])
def webhook():
    if flask.request.headers.get("content-type") == "application/json":
        json_string = flask.request.get_data().decode("utf-8")
        print(f"[WEBHOOK] –ü–æ–ª—É—á–µ–Ω–æ: {json_string}")
        try:
            update = telebot.types.Update.de_json(json_string)
            bot.process_new_updates([update])
            print("[WEBHOOK] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        except Exception as e:
            print(f"[WEBHOOK] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        return "ok", 200
    else:
        return "Unsupported Media Type", 415



bot.remove_webhook()
bot.set_webhook(url="https://factory-morozov-bot.onrender.com")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
